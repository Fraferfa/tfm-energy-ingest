name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: tfm-energia-streamlit-cloud
  SERVICE_NAME: tfm-energy-ingest
  REGION: europe-west1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black isort flake8 mypy
    
    - name: Run linting
      run: |
        black --check pipelines/ tests/
        isort --check-only pipelines/ tests/
        flake8 pipelines/ tests/ --max-line-length=88
    
    - name: Run type checking
      run: mypy pipelines/ --ignore-missing-imports
      continue-on-error: true  # No bloquear por warnings de tipos
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        ESIOS_TOKEN: fake_token_for_tests

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --timeout 900 \
          --max-instances 10 \
          --set-env-vars PROJECT_ID=$PROJECT_ID \
          --service-account ${{ secrets.CLOUD_RUN_SA }}
    
    - name: Deploy Cloud Scheduler (only if config changed)
      run: |
        if git diff --name-only HEAD~1 | grep -q "config/"; then
          python scripts/deploy_scheduler.py --project-id $PROJECT_ID
        else
          echo "Config unchanged, skipping scheduler update"
        fi
    
    - name: Run smoke tests
      run: |
        # Esperar a que el servicio esté disponible
        sleep 30
        
        # Test de health check
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        curl -f $SERVICE_URL/health || exit 1
        
        echo "Smoke tests passed!"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Aquí puedes añadir notificación a Slack, etc.
    
    - name: Notify failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Aquí puedes añadir notificación de error